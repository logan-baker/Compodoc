export default class CodeBlockWriter {
    private readonly _indentationText;
    private readonly _newLine;
    private readonly _useTabs;
    private readonly _quoteChar;
    private readonly _indentNumberOfSpaces;
    private _currentIndentation;
    private _text;
    private _newLineOnNextWrite;
    private _currentCommentChar;
    private _stringCharStack;
    constructor(opts?: {
        newLine?: string;
        indentNumberOfSpaces?: number;
        useTabs?: boolean;
        useSingleQuote?: boolean;
    });
    setIndentationLevel(indentationLevel: number): this;
    setIndentationLevel(indentationText: string): this;
    block(block?: () => void): this;
    inlineBlock(block?: () => void): this;
    conditionalWriteLine(condition: boolean | undefined, str: string): this;
    writeLine(str: string): this;
    newLineIfLastNotNewLine(): this;
    blankLine(): this;
    indent(): this;
    conditionalNewLine(condition: boolean | undefined): this;
    newLine(): this;
    quote(): this;
    quote(text: string): this;
    spaceIfLastNotSpace(): this;
    conditionalWrite(condition: boolean | undefined, text: string): this;
    write(text: string): this;
    getLength(): number;
    isInComment(): boolean;
    isInString(): boolean;
    toString(): string;
    private writeIndentingNewLines(text);
    private baseWriteNewline();
    private updateStringStack(str);
    private isLastCharANewLine();
    private getLastChar();
    private writeIndentation();
    private newLineIfNewLineOnNextWrite();
}
